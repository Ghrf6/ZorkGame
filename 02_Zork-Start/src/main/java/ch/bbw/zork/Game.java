package ch.bbw.zork;import ch.bbw.zork.models.FurnitureModel;import ch.bbw.zork.models.ItemModel;import ch.bbw.zork.repository.FurnitureRepository;import ch.bbw.zork.repository.ItemRepository;import java.util.ArrayList;import java.util.List;import java.util.NoSuchElementException;import java.util.Objects;import java.util.stream.Collectors;/** * Class Game - the main class of the "Zork" game. * <p> * Author:  Michael Kolling, 1.1, March 2000 * refactoring: Rinaldo Lanza, September 2020 */public class Game {    private Parser parser;    private ArrayList<ItemModel> backpack = new ArrayList<>();    private Room currentRoom;    private Room initiationChamber, firstSteps, pathOfChoice, hiddenPassage, enigmaCrossroads, chamberOfTriumph;    public Game() {        ItemRepository.createItems();        parser = new Parser(System.in);        initiationChamber = new Room("the Initiation Chamber", FurnitureRepository.getInitiationChamberList(), FurnitureRepository.getInitiationChamberList().stream().map(chamber -> ItemRepository.findById(chamber.getItemInSide())).collect(Collectors.toList()), "+---------------+       +---------------+\n" + "| Initiation    |       | First Steps   |\n" + "| Chamber       |-------|               |\n" + "|       X       |       |               |\n" + "+---------------+       +---------------+\n" + "\t\t\t\t\t\t\t\t|\n" + "\t\t\t\t\t\t\t\t|\n" + "+---------------+       +---------------+       +---------------+\n" + "| Enigma        |       | Path of Choice|       | Hidden Passage|\n" + "| Crossroads    |-------|               |-------|               |\n" + "|               |       |               |       |               |\n" + "+---------------+       +---------------+       +---------------+\n" + "        |\n" + "        |\n" + "+---------------+\n" + "| Chamber of    |\n" + "| Triumph       |\n" + "|               |\n" + "+---------------+\n");        firstSteps = new Room("lab, a lecture theatre in A block", FurnitureRepository.getFirstSteps(), ItemRepository.returnAllItems().stream().filter(i -> i.getId().equals(3) || i.getId().equals(2)).collect(Collectors.toList()), "+---------------+       +---------------+\n" + "| Initiation    |       | First Steps   |\n" + "| Chamber       |-------|               |\n" + "|               |       |       X       |\n" + "+---------------+       +---------------+\n" + "\t\t\t\t\t\t\t\t|\n" + "\t\t\t\t\t\t\t\t|\n" + "+---------------+       +---------------+       +---------------+\n" + "| Enigma        |       | Path of Choice|       | Hidden Passage|\n" + "| Crossroads    |-------|               |-------|               |\n" + "|               |       |               |       |               |\n" + "+---------------+       +---------------+       +---------------+\n" + "        |\n" + "        |\n" + "+---------------+\n" + "| Chamber of    |\n" + "| Triumph       |\n" + "|               |\n" + "+---------------+");        pathOfChoice = new Room("the Seahorse Tavern (the campus pub)", FurnitureRepository.getPathOfChoice(), ItemRepository.returnAllItems().stream().filter(i -> i.getId().equals(4) || i.getId().equals(5)).collect(Collectors.toList()), "+---------------+       +---------------+\n" + "| Initiation    |       | First Steps   |\n" + "| Chamber       |-------|               |\n" + "|               |       |               |\n" + "+---------------+       +---------------+\n" + "\t\t\t\t\t\t\t\t|\n" + "\t\t\t\t\t\t\t\t|\n" + "+---------------+       +---------------+       +---------------+\n" + "| Enigma        |       | Path of Choice|       | Hidden Passage|\n" + "| Crossroads    |-------|               |-------|               |\n" + "|               |       |       X       |       |               |\n" + "+---------------+       +---------------+       +---------------+\n" + "        |\n" + "        |\n" + "+---------------+\n" + "| Chamber of    |\n" + "| Triumph       |\n" + "|               |\n" + "+---------------+");//        hiddenPassage = new Room("the G Block", hiddenPassageList, null, "+---------------+       +---------------+\n" + "| Initiation    |       | First Steps   |\n" + "| Chamber       |-------|               |\n" + "|               |       |               |\n" + "+---------------+       +---------------+\n" + "\t\t\t\t\t\t\t\t|\n" + "\t\t\t\t\t\t\t\t|\n" + "+---------------+       +---------------+       +---------------+\n" + "| Enigma        |       | Path of Choice|       | Hidden Passage|\n" + "| Crossroads    |-------|               |-------|               |\n" + "|               |       |               |       |       X       |\n" + "+---------------+       +---------------+       +---------------+\n" + "        |\n" + "        |\n" + "+---------------+\n" + "| Chamber of    |\n" + "| Triumph       |\n" + "|               |\n" + "+---------------+");//        enigmaCrossroads = new Room("the computing admin office", enigmaCrossroadsList, null, "+---------------+       +---------------+\n" + "| Initiation    |       | First Steps   |\n" + "| Chamber       |-------|               |\n" + "|               |       |               |\n" + "+---------------+       +---------------+\n" + "\t\t\t\t\t\t\t\t|\n" + "\t\t\t\t\t\t\t\t|\n" + "+---------------+       +---------------+       +---------------+\n" + "| Enigma        |       | Path of Choice|       | Hidden Passage|\n" + "| Crossroads    |-------|               |-------|               |\n" + "|       X       |       |               |       |               |\n" + "+---------------+       +---------------+       +---------------+\n" + "        |\n" + "        |\n" + "+---------------+\n" + "| Chamber of    |\n" + "| Triumph       |\n" + "|               |\n" + "+---------------+");//        chamberOfTriumph = new Room("the computing admin office", chamberOfTriumphList, null, "+---------------+       +---------------+\n" + "| Initiation    |       | First Steps   |\n" + "| Chamber       |-------|               |\n" + "|               |       |               |\n" + "+---------------+       +---------------+\n" + "\t\t\t\t\t\t\t\t|\n" + "\t\t\t\t\t\t\t\t|\n" + "+---------------+       +---------------+       +---------------+\n" + "| Enigma        |       | Path of Choice|       | Hidden Passage|\n" + "| Crossroads    |-------|               |-------|               |\n" + "|               |       |               |       |               |\n" + "+---------------+       +---------------+       +---------------+\n" + "        |\n" + "        |\n" + "+---------------+\n" + "| Chamber of    |\n" + "| Triumph       |\n" + "|       X       |\n" + "+---------------+\n");        initiationChamber.setExits(null, firstSteps, null, null);        firstSteps.setExits(null, null, pathOfChoice, initiationChamber);        pathOfChoice.setExits(firstSteps, hiddenPassage, null, enigmaCrossroads);//        hiddenPassage.setExits(null, null, null, pathOfChoice);//        enigmaCrossroads.setExits(null, pathOfChoice, chamberOfTriumph, null);//        chamberOfTriumph.setExits(null, null, null, null);        currentRoom = initiationChamber; // start game outside        firstSteps.lockDoor(1);        pathOfChoice.lockDoor(7896);    }    /**     * Main play routine.  Loops until end of play.     */    public void play() {        printWelcome();        // Enter the main command loop.  Here we repeatedly read commands and        // execute them until the game is over.        boolean finished = false;        while (!finished) {            Command command = parser.getCommand();            finished = processCommand(command);        }        System.out.println("Thank you for playing.  Good bye.");    }    private void printWelcome() {        System.out.println();        System.out.println("Welcome to Zork!");        System.out.println("Zork is a simple adventure game.");        System.out.println("Type 'help' if you need help.");        System.out.println();        System.out.println(currentRoom.longDescription());    }    private boolean processCommand(Command command) {        if (command.isUnknown()) {            System.out.println("I don't know what you mean...");            return false;        }        String commandWord = command.getCommandWord();        if (commandWord.equals("help")) {            printHelp();        }        if (commandWord.equals("go")) {            try {                goRoom(command);            } catch (NullPointerException ex) {                System.out.println("there was something wrong pls try again");            }        }        if (commandWord.equals("checkout-room")) {            System.out.println(currentRoom.allRooms());            currentRoom.returnFurniture().stream().forEach(e -> System.out.println(e.getName()));            currentRoom.returnFurniture().forEach(furniture -> {                currentRoom.returnItem().stream().filter(item -> item.getId() != furniture.getItemInSide()).filter(ItemModel::isVisible).forEach(item -> System.out.println(item.getName()));            });        }        if (commandWord.equals("inspect")) {            if (!command.hasSecondWord()) System.out.println("inspect what?");            else {                String object = command.getSecondWord();                if (currentRoom.returnFurniture().stream().filter(furniture -> furniture.getName().equals(object)).anyMatch(furniture -> furniture.getItemInSide() == null)) {                    System.out.println("This " + object + " is empty");                } else if (currentRoom.returnFurniture().stream().filter(furniture -> furniture.getName().contains(object)).anyMatch(furniture -> furniture.getItemToOpen() != null)) {                    System.out.println("I am locked try to unlock me");                } else {                    List<FurnitureModel> collect = currentRoom.returnFurniture().stream().filter(e -> e.getName().contains(object)).collect(Collectors.toList());                    collect.stream().filter(e -> e.getItemInSide() != null).forEach(e -> System.out.println(e.getDescription() + " a " + ItemRepository.findById(e.getItemInSide()).getName() + " inside"));                    collect.stream().filter(e -> e.getItemInSide() == null).forEach(e -> System.out.println(e.getDescription()));                    currentRoom.returnItem().stream().filter(e -> e.getName().contains(object)).filter(ItemModel::isVisible).forEach(i -> System.out.println(i.getDescription()));                    backpack.stream().filter(e-> e.getName().contains(object)).forEach(i -> System.out.println(i.getDescription()));                }            }        }        if (commandWord.equals("backpack")) {            if (backpack.size() == 0) System.out.println("backpack is empty");            else {                backpack.stream().forEach(i -> System.out.println(i.getName()));            }        }        if (commandWord.equals("take")) {            if (!command.hasSecondWord()) System.out.println("Try what?");            else {                String item = command.getSecondWord();                try {                    ItemModel itemModel = currentRoom.returnItem().stream().filter(i -> i.getName().contains(item)).filter(ItemModel::isVisible).findFirst().orElseThrow();                    try {                        this.backpack.add(itemModel);                        currentRoom.changeVisible(itemModel.getId());                        currentRoom.editFurnitureItem(currentRoom.returnFurniture().stream().filter(i -> i.getItemInSide().equals(itemModel.getId())).findFirst().orElseThrow().getId());                    } catch (NoSuchElementException ex) {                        if (itemModel.isVisible()) {                            currentRoom.changeVisible(itemModel.getId());                            System.out.println("you picked up " + itemModel.getName());                        } else {                            System.out.println("you did not find this item yet");                        }                    }                }catch (NoSuchElementException ex){                    System.out.println("you cant pick up this object");                }            }        }        if (commandWord.equals("drop")) {            System.out.println("will come sune");        }        if (commandWord.equals("try")) {            if (!command.hasSecondWord()) System.out.println("Try what?");            else if (!command.hasThirdWord()) System.out.println("Try where?");            else {                String item = command.getSecondWord();                String door = command.getThirdWord();                Integer id;                try {                    id = Integer.valueOf(item);                    findUseOfWord(door, id);                } catch (NumberFormatException ex) {                    if (!backpack.stream().anyMatch(i -> i.getName().equals(command.getSecondWord()))) {                        System.out.println("you dont have a " + command.getSecondWord() + "in your backpack");                    } else if (currentRoom.returnItem().stream().filter(i -> i.getName().contains(item)).collect(Collectors.toList()).size() != 0) {                        id = currentRoom.returnItem().stream().filter(i -> i.getName().contains(item)).findFirst().orElseThrow().getId();                        findUseOfWord(door, id);                    } else {                        System.out.println("invalid value");                    }                }            }        }        if (commandWord.equals("chart")) {            System.out.println(currentRoom.getChart());        }        if (commandWord.equals("quit")) {            if (command.hasSecondWord()) {                System.out.println("Quit what?");            } else {                return true; // signal that we want to quit            }        }        return false;    }    private void printHelp() {        System.out.println("You are lost. You are alone. You wander");        System.out.println("around at Monash Uni, Peninsula Campus.");        System.out.println();        System.out.println("Your command words are:");        System.out.println(parser.showCommands());    }    private void goRoom(Command command) {        if (!command.hasSecondWord()) {            System.out.println("Go where?");        } else {            String direction = command.getSecondWord();            // Try to leave current room.            Room nextRoom = currentRoom.nextRoom(direction);            if (nextRoom == null) System.out.println("There is no door!");            if (nextRoom.isDoorLocked()) System.out.println("The door is looked");            else {                currentRoom = nextRoom;                System.out.println(currentRoom.longDescription());            }        }    }    private void findUseOfWord(String door, Integer id) {        try {            if (currentRoom.allRooms().contains(door)) {                System.out.println(currentRoom.nextRoom(door).unlockDoor(id));            } else if (currentRoom.returnFurniture().stream().filter(f -> f.getName().contains(door)).collect(Collectors.toList()).size() != 0) {                for (int i = 0; i < currentRoom.returnFurniture().size(); i++) {                    if (Objects.equals(currentRoom.returnFurniture().get(i).getItemToOpen(), id)) {                        if (!ItemRepository.findById((currentRoom.returnFurniture().stream().filter(f -> f.getName().contains(door)).findFirst().orElseThrow().getItemInSide())).isVisible()) {                            currentRoom.changeVisible(currentRoom.returnFurniture().stream().filter(f -> f.getName().contains(door)).findFirst().orElseThrow().getItemInSide());                        }                        currentRoom.editFurniture(currentRoom.returnFurniture().get(i).getId());                        System.out.println("its open now");                    }                }            } else {                System.out.println("this combination is not possible");            }        } catch (NullPointerException ex) {            System.out.println(" ");        }    }}