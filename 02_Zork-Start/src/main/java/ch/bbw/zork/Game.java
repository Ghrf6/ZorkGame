package ch.bbw.zork;import java.util.ArrayList;/** * Class Game - the main class of the "Zork" game. * <p> * Author:  Michael Kolling, 1.1, March 2000 * refactoring: Rinaldo Lanza, September 2020 */public class Game {    private Parser parser;    private Room currentRoom;    private Room initiationChamber, firstSteps, pathOfChoice, hiddenPassage, enigmaCrossroads, chamberOfTriumph;    public Game() {        ArrayList<String> initiationChamberList = new ArrayList<>();        ArrayList<String> firstStepsList = new ArrayList<>();        ArrayList<String> pathOfChoiceList = new ArrayList<>();        ArrayList<String> hiddenPassageList = new ArrayList<>();        ArrayList<String> enigmaCrossroadsList = new ArrayList<>();        ArrayList<String> chamberOfTriumphList = new ArrayList<>();        parser = new Parser(System.in);        initiationChamber = new Room("the Initiation Chamber", initiationChamberList, "+---------------+       +---------------+\n" + "| Initiation    |       | First Steps   |\n" + "| Chamber       |-------|               |\n" + "|       X       |       |               |\n" + "+---------------+       +---------------+\n" + "\t\t\t\t\t\t\t\t|\n" + "\t\t\t\t\t\t\t\t|\n" + "+---------------+       +---------------+       +---------------+\n" + "| Enigma        |       | Path of Choice|       | Hidden Passage|\n" + "| Crossroads    |-------|               |-------|               |\n" + "|               |       |               |       |               |\n" + "+---------------+       +---------------+       +---------------+\n" + "        |\n" + "        |\n" + "+---------------+\n" + "| Chamber of    |\n" + "| Triumph       |\n" + "|               |\n" + "+---------------+\n");        firstSteps = new Room("lab, a lecture theatre in A block", firstStepsList, "+---------------+       +---------------+\n" + "| Initiation    |       | First Steps   |\n" + "| Chamber       |-------|               |\n" + "|               |       |       X       |\n" + "+---------------+       +---------------+\n" + "\t\t\t\t\t\t\t\t|\n" + "\t\t\t\t\t\t\t\t|\n" + "+---------------+       +---------------+       +---------------+\n" + "| Enigma        |       | Path of Choice|       | Hidden Passage|\n" + "| Crossroads    |-------|               |-------|               |\n" + "|               |       |               |       |               |\n" + "+---------------+       +---------------+       +---------------+\n" + "        |\n" + "        |\n" + "+---------------+\n" + "| Chamber of    |\n" + "| Triumph       |\n" + "|               |\n" + "+---------------+");        pathOfChoice = new Room("the Seahorse Tavern (the campus pub)", pathOfChoiceList, "+---------------+       +---------------+\n" + "| Initiation    |       | First Steps   |\n" + "| Chamber       |-------|               |\n" + "|               |       |               |\n" + "+---------------+       +---------------+\n" + "\t\t\t\t\t\t\t\t|\n" + "\t\t\t\t\t\t\t\t|\n" + "+---------------+       +---------------+       +---------------+\n" + "| Enigma        |       | Path of Choice|       | Hidden Passage|\n" + "| Crossroads    |-------|               |-------|               |\n" + "|               |       |       X       |       |               |\n" + "+---------------+       +---------------+       +---------------+\n" + "        |\n" + "        |\n" + "+---------------+\n" + "| Chamber of    |\n" + "| Triumph       |\n" + "|               |\n" + "+---------------+");        hiddenPassage = new Room("the G Block", hiddenPassageList, "+---------------+       +---------------+\n" + "| Initiation    |       | First Steps   |\n" + "| Chamber       |-------|               |\n" + "|               |       |               |\n" + "+---------------+       +---------------+\n" + "\t\t\t\t\t\t\t\t|\n" + "\t\t\t\t\t\t\t\t|\n" + "+---------------+       +---------------+       +---------------+\n" + "| Enigma        |       | Path of Choice|       | Hidden Passage|\n" + "| Crossroads    |-------|               |-------|               |\n" + "|               |       |               |       |       X       |\n" + "+---------------+       +---------------+       +---------------+\n" + "        |\n" + "        |\n" + "+---------------+\n" + "| Chamber of    |\n" + "| Triumph       |\n" + "|               |\n" + "+---------------+");        enigmaCrossroads = new Room("the computing admin office", enigmaCrossroadsList, "+---------------+       +---------------+\n" + "| Initiation    |       | First Steps   |\n" + "| Chamber       |-------|               |\n" + "|               |       |               |\n" + "+---------------+       +---------------+\n" + "\t\t\t\t\t\t\t\t|\n" + "\t\t\t\t\t\t\t\t|\n" + "+---------------+       +---------------+       +---------------+\n" + "| Enigma        |       | Path of Choice|       | Hidden Passage|\n" + "| Crossroads    |-------|               |-------|               |\n" + "|       X       |       |               |       |               |\n" + "+---------------+       +---------------+       +---------------+\n" + "        |\n" + "        |\n" + "+---------------+\n" + "| Chamber of    |\n" + "| Triumph       |\n" + "|               |\n" + "+---------------+");        chamberOfTriumph = new Room("the computing admin office", chamberOfTriumphList, "+---------------+       +---------------+\n" + "| Initiation    |       | First Steps   |\n" + "| Chamber       |-------|               |\n" + "|               |       |               |\n" + "+---------------+       +---------------+\n" + "\t\t\t\t\t\t\t\t|\n" + "\t\t\t\t\t\t\t\t|\n" + "+---------------+       +---------------+       +---------------+\n" + "| Enigma        |       | Path of Choice|       | Hidden Passage|\n" + "| Crossroads    |-------|               |-------|               |\n" + "|               |       |               |       |               |\n" + "+---------------+       +---------------+       +---------------+\n" + "        |\n" + "        |\n" + "+---------------+\n" + "| Chamber of    |\n" + "| Triumph       |\n" + "|       X       |\n" + "+---------------+\n");        initiationChamber.setExits(null, firstSteps, null, null);        firstSteps.setExits(null, null, pathOfChoice, initiationChamber);        pathOfChoice.setExits(firstSteps, hiddenPassage, null, enigmaCrossroads);        hiddenPassage.setExits(null, null, null, pathOfChoice);        enigmaCrossroads.setExits(null, pathOfChoice, chamberOfTriumph, null);        chamberOfTriumph.setExits(null, null, null, null);        currentRoom = initiationChamber; // start game outside    }    /**     * Main play routine.  Loops until end of play.     */    public void play() {        printWelcome();        // Enter the main command loop.  Here we repeatedly read commands and        // execute them until the game is over.        boolean finished = false;        while (!finished) {            Command command = parser.getCommand();            finished = processCommand(command);        }        System.out.println("Thank you for playing.  Good bye.");    }    private void printWelcome() {        System.out.println();        System.out.println("Welcome to Zork!");        System.out.println("Zork is a simple adventure game.");        System.out.println("Type 'help' if you need help.");        System.out.println();        System.out.println(currentRoom.longDescription());    }    private boolean processCommand(Command command) {        if (command.isUnknown()) {            System.out.println("I don't know what you mean...");            return false;        }        String commandWord = command.getCommandWord();        if (commandWord.equals("help")) {            printHelp();        }        if (commandWord.equals("go")) {            goRoom(command);        }        if (commandWord.equals("checkout-room")) {            System.out.println("will come sune");        }        if (commandWord.equals("inspect")) {            System.out.println("will come sune");        }        if (commandWord.equals("backpack")) {            System.out.println("will come sune");        }        if (commandWord.equals("backpack")) {            System.out.println("will come sune");        }        if (commandWord.equals("take")) {            System.out.println("will come sune");        }        if (commandWord.equals("drop")) {            System.out.println("will come sune");        }        if (commandWord.equals("try")) {            System.out.println("will come sune");        }        if (commandWord.equals("map")) {            getMap();        }        if (commandWord.equals("quit")) {            if (command.hasSecondWord()) {                System.out.println("Quit what?");            } else {                return true; // signal that we want to quit            }        }        return false;    }    private void printHelp() {        System.out.println("You are lost. You are alone. You wander");        System.out.println("around at Monash Uni, Peninsula Campus.");        System.out.println();        System.out.println("Your command words are:");        System.out.println(parser.showCommands());    }    private void getMap() {        System.out.println(currentRoom.getMap());    }    private void goRoom(Command command) {        if (!command.hasSecondWord()) {            System.out.println("Go where?");        } else {            String direction = command.getSecondWord();            // Try to leave current room.            Room nextRoom = currentRoom.nextRoom(direction);            if (nextRoom == null) System.out.println("There is no door!");            else {                currentRoom = nextRoom;                System.out.println(currentRoom.longDescription());            }        }    }}